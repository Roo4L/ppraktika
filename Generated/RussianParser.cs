//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Russian.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class RussianParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, MOD=3, MUL=4, DIV=5, ADD=6, SUB=7, ASSIGN=8, ID=9, NUM=10, 
		INT=11, FLT=12, NL=13, WS=14;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_expr = 2, RULE_primary = 3;
	public static readonly string[] ruleNames = {
		"prog", "stat", "expr", "primary"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'%'", "'*'", "'/'", "'+'", "'-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "MOD", "MUL", "DIV", "ADD", "SUB", "ASSIGN", "ID", "NUM", 
		"INT", "FLT", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Russian.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RussianParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RussianParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RussianParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8; stat();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID || _la==NL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlankContext : StatContext {
		public ITerminalNode NL() { return GetToken(RussianParser.NL, 0); }
		public BlankContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterBlank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitBlank(this);
		}
	}
	public partial class FuncContext : StatContext {
		public IToken parm;
		public ITerminalNode[] ID() { return GetTokens(RussianParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(RussianParser.ID, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(RussianParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NL() { return GetToken(RussianParser.NL, 0); }
		public ITerminalNode NUM() { return GetToken(RussianParser.NUM, 0); }
		public FuncContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
	}
	public partial class AssignContext : StatContext {
		public ITerminalNode ID() { return GetToken(RussianParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(RussianParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NL() { return GetToken(RussianParser.NL, 0); }
		public AssignContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		int _la;
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; Match(ID);
				State = 14; Match(ASSIGN);
				State = 15; expr(0);
				State = 16; Match(NL);
				}
				break;
			case 2:
				_localctx = new FuncContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; Match(ID);
				State = 19; Match(T__0);
				State = 20;
				((FuncContext)_localctx).parm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ID || _la==NUM) ) {
					((FuncContext)_localctx).parm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 21; Match(T__1);
				State = 22; Match(ASSIGN);
				State = 23; expr(0);
				State = 24; Match(NL);
				}
				break;
			case 3:
				_localctx = new BlankContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 26; Match(NL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(RussianParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}
	public partial class ModMulDivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(RussianParser.MOD, 0); }
		public ITerminalNode MUL() { return GetToken(RussianParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(RussianParser.DIV, 0); }
		public ModMulDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterModMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitModMulDiv(this);
		}
	}
	public partial class PrimContext : ExprContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterPrim(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitPrim(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(RussianParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(RussianParser.SUB, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
	}
	public partial class UnaryContext : ExprContext {
		public IToken sign;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(RussianParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(RussianParser.SUB, 0); }
		public UnaryContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 30; Match(ID);
				State = 31; Match(T__0);
				State = 32; expr(0);
				State = 33; Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new UnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35;
				((UnaryContext)_localctx).sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
					((UnaryContext)_localctx).sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 36; primary();
				}
				break;
			case 3:
				{
				_localctx = new PrimContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; primary();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 46;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ModMulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 40;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 41;
						((ModMulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MOD) | (1L << MUL) | (1L << DIV))) != 0)) ) {
							((ModMulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42; expr(6);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 43;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 44;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 45; expr(5);
						}
						break;
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : PrimaryContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
	}
	public partial class NumContext : PrimaryContext {
		public ITerminalNode NUM() { return GetToken(RussianParser.NUM, 0); }
		public NumContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
	}
	public partial class IdContext : PrimaryContext {
		public ITerminalNode ID() { return GetToken(RussianParser.ID, 0); }
		public IdContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRussianListener typedListener = listener as IRussianListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_primary);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new NumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; Match(NUM);
				}
				break;
			case ID:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(ID);
				}
				break;
			case T__0:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; Match(T__0);
				State = 54; expr(0);
				State = 55; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x6', '\x2', '\f', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\r', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x1E', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ')', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x31', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x34', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '<', '\n', '\x5', '\x3', '\x5', '\x2', '\x3', '\x6', '\x6', 
		'\x2', '\x4', '\x6', '\b', '\x2', '\x5', '\x3', '\x2', '\v', '\f', '\x3', 
		'\x2', '\b', '\t', '\x3', '\x2', '\x5', '\a', '\x2', '\x42', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '(', '\x3', '\x2', '\x2', '\x2', '\b', ';', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\f', '\x5', '\x4', '\x3', '\x2', '\v', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', '\x2', '\r', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', '\x2', '\x2', '\xE', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\v', '\x2', '\x2', '\x10', 
		'\x11', '\a', '\n', '\x2', '\x2', '\x11', '\x12', '\x5', '\x6', '\x4', 
		'\x2', '\x12', '\x13', '\a', '\xF', '\x2', '\x2', '\x13', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\a', '\v', '\x2', '\x2', '\x15', 
		'\x16', '\a', '\x3', '\x2', '\x2', '\x16', '\x17', '\t', '\x2', '\x2', 
		'\x2', '\x17', '\x18', '\a', '\x4', '\x2', '\x2', '\x18', '\x19', '\a', 
		'\n', '\x2', '\x2', '\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', 
		'\x1B', '\a', '\xF', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1E', '\a', '\xF', '\x2', '\x2', '\x1D', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x14', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\b', '\x4', '\x1', '\x2', ' ', '!', '\a', '\v', '\x2', 
		'\x2', '!', '\"', '\a', '\x3', '\x2', '\x2', '\"', '#', '\x5', '\x6', 
		'\x4', '\x2', '#', '$', '\a', '\x4', '\x2', '\x2', '$', ')', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\t', '\x3', '\x2', '\x2', '&', ')', '\x5', '\b', 
		'\x5', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', '(', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '(', '%', '\x3', '\x2', '\x2', '\x2', '(', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', '\x32', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\f', '\a', '\x2', '\x2', '+', ',', '\t', '\x4', '\x2', '\x2', ',', 
		'\x31', '\x5', '\x6', '\x4', '\b', '-', '.', '\f', '\x6', '\x2', '\x2', 
		'.', '/', '\t', '\x3', '\x2', '\x2', '/', '\x31', '\x5', '\x6', '\x4', 
		'\a', '\x30', '*', '\x3', '\x2', '\x2', '\x2', '\x30', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\a', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '<', '\a', '\f', '\x2', '\x2', '\x36', '<', '\a', 
		'\v', '\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\x6', '\x4', '\x2', '\x39', ':', '\a', '\x4', '\x2', '\x2', 
		':', '<', '\x3', '\x2', '\x2', '\x2', ';', '\x35', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x36', '\x3', '\x2', '\x2', '\x2', ';', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '<', '\t', '\x3', '\x2', '\x2', '\x2', '\b', '\r', '\x1D', 
		'(', '\x30', '\x32', ';',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
