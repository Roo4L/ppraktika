//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\darga\Documents\PP\ppraktika\Russian.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class RussianLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, INT=3, ID=4, ADD=5, SUB=6, MUL=7, DIV=8, ASSIGN=9, NEWLINE=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "INT", "ID", "ADD", "SUB", "MUL", "DIV", "ASSIGN", "NEWLINE"
	};


	public RussianLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RussianLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, "'\u0420\u0457\u0420\u00BB\u0421\u040B\u0421\u0403'", 
		"'\u0420\u0458\u0420\u0451\u0420\u0405\u0421\u0453\u0421\u0403'", "'\u0421\u0453\u0420\u0458\u0420\u0405\u0420\u0455\u0420\u00B6\u0420\u0451\u0421\u201A\u0421\u040A \u0420\u0405\u0420\u00B0'", 
		"'\u0421\u0402\u0420\u00B0\u0420\u00B7\u0420\u0491\u0420\u00B5\u0420\u00BB\u0420\u0451\u0421\u201A\u0421\u040A \u0420\u0405\u0420\u00B0'", 
		"'\u0421\u0402\u0420\u00B0\u0420\u0406\u0420\u0405\u0420\u0455'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "INT", "ID", "ADD", "SUB", "MUL", "DIV", "ASSIGN", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Russian.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RussianLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', '\x80', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x6', '\x4', '\x1D', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x1E', 
		'\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '#', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', '$', '\x5', '\x4', '\'', '\n', '\x4', '\x3', '\x5', '\x5', 
		'\x5', '*', '\n', '\x5', '\x3', '\x5', '\a', '\x5', '-', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x30', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x2', '\x2', '\f', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', 
		'\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', 
		'\x15', '\f', '\x3', '\x2', '\x5', '\x6', '\x2', '\x32', '\x36', 'H', 
		'H', '\x61', '\x61', 'z', 'z', '\x6', '\x2', '\x32', ';', 'H', 'H', '\x61', 
		'\x61', 'z', 'z', '\x5', '\x2', '\v', '\f', '\xE', '\xF', '\"', '\"', 
		'\x2', '\x83', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x5', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x1C', '\x3', '\x2', '\x2', '\x2', '\t', ')', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x31', '\x3', '\x2', '\x2', '\x2', '\r', ':', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x45', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x13', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '~', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', '*', '\x2', 
		'\x2', '\x18', '\x4', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', 
		'+', '\x2', '\x2', '\x1A', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1D', '\x4', '\x32', ';', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'&', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\a', '\x30', '\x2', '\x2', 
		'!', '#', '\x4', '\x32', ';', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', 
		'\x2', '\x2', '&', ' ', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\b', '\x3', '\x2', '\x2', '\x2', '(', '*', 
		'\t', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', 
		'.', '\x3', '\x2', '\x2', '\x2', '+', '-', '\t', '\x3', '\x2', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\n', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x422', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x459', '\x2', '\x2', '\x33', '\x34', '\a', '\x422', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\xBD', '\x2', '\x2', '\x35', '\x36', '\a', '\x423', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x40D', '\x2', '\x2', '\x37', '\x38', 
		'\a', '\x423', '\x2', '\x2', '\x38', '\x39', '\a', '\x405', '\x2', '\x2', 
		'\x39', '\f', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x422', '\x2', 
		'\x2', ';', '<', '\a', '\x45A', '\x2', '\x2', '<', '=', '\a', '\x422', 
		'\x2', '\x2', '=', '>', '\a', '\x453', '\x2', '\x2', '>', '?', '\a', '\x422', 
		'\x2', '\x2', '?', '@', '\a', '\x407', '\x2', '\x2', '@', '\x41', '\a', 
		'\x423', '\x2', '\x2', '\x41', '\x42', '\a', '\x455', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x423', '\x2', '\x2', '\x43', '\x44', '\a', '\x405', '\x2', 
		'\x2', '\x44', '\xE', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\x423', '\x2', '\x2', '\x46', 'G', '\a', '\x455', '\x2', '\x2', 'G', 
		'H', '\a', '\x422', '\x2', '\x2', 'H', 'I', '\a', '\x45A', '\x2', '\x2', 
		'I', 'J', '\a', '\x422', '\x2', '\x2', 'J', 'K', '\a', '\x407', '\x2', 
		'\x2', 'K', 'L', '\a', '\x422', '\x2', '\x2', 'L', 'M', '\a', '\x457', 
		'\x2', '\x2', 'M', 'N', '\a', '\x422', '\x2', '\x2', 'N', 'O', '\a', '\xB8', 
		'\x2', '\x2', 'O', 'P', '\a', '\x422', '\x2', '\x2', 'P', 'Q', '\a', '\x453', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x423', '\x2', '\x2', 'R', 'S', '\a', '\x201C', 
		'\x2', '\x2', 'S', 'T', '\a', '\x423', '\x2', '\x2', 'T', 'U', '\a', '\x40C', 
		'\x2', '\x2', 'U', 'V', '\a', '\"', '\x2', '\x2', 'V', 'W', '\a', '\x422', 
		'\x2', '\x2', 'W', 'X', '\a', '\x407', '\x2', '\x2', 'X', 'Y', '\a', '\x422', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\xB2', '\x2', '\x2', 'Z', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\a', '\x423', '\x2', '\x2', '\\', ']', 
		'\a', '\x404', '\x2', '\x2', ']', '^', '\a', '\x422', '\x2', '\x2', '^', 
		'_', '\a', '\xB2', '\x2', '\x2', '_', '`', '\a', '\x422', '\x2', '\x2', 
		'`', '\x61', '\a', '\xB9', '\x2', '\x2', '\x61', '\x62', '\a', '\x422', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\x493', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\x422', '\x2', '\x2', '\x64', '\x65', '\a', '\xB7', '\x2', '\x2', 
		'\x65', '\x66', '\a', '\x422', '\x2', '\x2', '\x66', 'g', '\a', '\xBD', 
		'\x2', '\x2', 'g', 'h', '\a', '\x422', '\x2', '\x2', 'h', 'i', '\a', '\x453', 
		'\x2', '\x2', 'i', 'j', '\a', '\x423', '\x2', '\x2', 'j', 'k', '\a', '\x201C', 
		'\x2', '\x2', 'k', 'l', '\a', '\x423', '\x2', '\x2', 'l', 'm', '\a', '\x40C', 
		'\x2', '\x2', 'm', 'n', '\a', '\"', '\x2', '\x2', 'n', 'o', '\a', '\x422', 
		'\x2', '\x2', 'o', 'p', '\a', '\x407', '\x2', '\x2', 'p', 'q', '\a', '\x422', 
		'\x2', '\x2', 'q', 'r', '\a', '\xB2', '\x2', '\x2', 'r', '\x12', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\a', '\x423', '\x2', '\x2', 't', 'u', 
		'\a', '\x404', '\x2', '\x2', 'u', 'v', '\a', '\x422', '\x2', '\x2', 'v', 
		'w', '\a', '\xB2', '\x2', '\x2', 'w', 'x', '\a', '\x422', '\x2', '\x2', 
		'x', 'y', '\a', '\x408', '\x2', '\x2', 'y', 'z', '\a', '\x422', '\x2', 
		'\x2', 'z', '{', '\a', '\x407', '\x2', '\x2', '{', '|', '\a', '\x422', 
		'\x2', '\x2', '|', '}', '\a', '\x457', '\x2', '\x2', '}', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\t', '\x4', '\x2', '\x2', '\x7F', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x2', '\x1E', '$', '&', ')', ',', '.', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
